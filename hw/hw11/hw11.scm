(define (find s predicate)
  (cond
   ((null? s) #f)
   ((predicate (car s)) (car s))
   (else (find (cdr-stream s) predicate))
  )
)

(define (scale-stream s k)
  (cons-stream (* (car s) k) (scale-stream (cdr-stream s) k))
)

(define (has-cycle s)
  (define fast (cdr-stream s))
  (define slow s)
  (define (helper fast slow)
    (cond
      ((eq? fast slow) #t)
      ((or (null? fast) (null? (cdr-stream fast))) #f)
      (else (helper (cdr-stream (cdr-stream fast)) (cdr-stream slow)))
    )
  )
  (helper fast slow)
)
(define (has-cycle-constant s)
  (define fast (cdr-stream s))
  (define slow s)
  (define (helper fast slow)
    (cond
      ((eq? fast slow) #t)
      ((or (null? fast) (null? (cdr-stream fast))) #f)
      (else (helper (cdr-stream (cdr-stream fast)) (cdr-stream slow)))
    )
  )
(helper fast slow)
)
